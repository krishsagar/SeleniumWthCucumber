package stepDefinitions;

import java.util.ArrayList;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.ie.InternetExplorerDriver;

import cucumber.api.java.After;
import cucumber.api.java.Before;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import pagesRepository.Add_Document;
import pagesRepository.Content_Search;
import pagesRepository.Create_Work;
import pagesRepository.Help;
import pagesRepository.HomePage;
import pagesRepository.LoginPage;
import pagesRepository.Logout;
import pagesRepository.Preferences;
import pagesRepository.ProcessMenu;

public class Base {

	WebDriver driver;

	@Before
	public void setup() {
		System.setProperty("webdriver.ie.driver",
				"C:\\Users\\src\\main\\resources\\drivers\\IEDriverServer.exe");
		 driver = new InternetExplorerDriver();
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
		driver.get("https://www.google.com/");
		try {
			Thread.sleep(5000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		ArrayList<String> tabs = new ArrayList<String>(driver.getWindowHandles());
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		driver.switchTo().defaultContent().close();
		System.out.println("unUsed tab closed");
		driver.switchTo().window(tabs.get(1));
		driver.manage().window().maximize();
		System.out.println(driver.getCurrentUrl());

		WebElement userName = driver.findElement(By.xpath("//input[@name='txtUserID']"));
		WebElement userPassword = driver.findElement(By.xpath("//input[@name='txtPWD']"));
		JavascriptExecutor jst = (JavascriptExecutor) driver;
		jst.executeScript("arguments[1].value = arguments[0]; ", "krishna", userName);
		jst.executeScript("arguments[1].value = arguments[0]; ", "12345", userPassword);
		driver.findElement(By.xpath("//button[@name='btnLogin']")).click();
		System.out.println("welcome...");
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {

			e.printStackTrace();
		}
	}
	
	@After
	public void tearDown()
	{
		driver.close();
	}


	
	@Given("^user login successfully to the application$")
	public void user_login_successfully_to_the_application() throws Throwable {
	
		System.out.println("congrats ,now you logged IN");
		LoginPage lp=new LoginPage(driver);
		lp.verifyTheLoginUser();
	}

	@When("^user should be to click home page$")
	public void user_should_be_at_home_page() throws Throwable {
		System.out.println("welcome to home page");
		HomePage hp=new HomePage(driver);
		hp.clickOnHomeLink();
		

	}

	@Then("^verify the home page$")
	public void verify_the_home_page() throws Throwable {
		HomePage hpverify=new HomePage(driver);
		hpverify.verifyHomePage();
		
	}

	@When("^user should be to click Content Search$")
	public void user_should_be_to_click_Content_Search() throws Throwable {
		Content_Search cs=new Content_Search(driver);
		cs.clickOnContent_SearchLink();
	}

	@Then("^verify the Content Search page$")
	public void verify_the_Content_Search_page() throws Throwable {
		Content_Search csverify=new Content_Search(driver);
		csverify.clickOnContent_SearchLink();
	}

	@When("^user should be to click Process$")
	public void user_should_be_to_click_Process() throws Throwable {
		ProcessMenu pconnector=new ProcessMenu(driver);
		pconnector.clickProcessLink();
		
	}

	@Then("^verify the Process page$")
	public void verify_the_Process_page() throws Throwable {
		ProcessMenu pconnectorVerify=new ProcessMenu(driver);
		pconnectorVerify.verifyContent_SearchPage();
	}

	@When("^user should be to click Preferences$")
	public void user_should_be_to_click_Preferences() throws Throwable {
		Preferences preConnector=new Preferences(driver);
		preConnector.clickPreferencesLink();
	     
	}

	@Then("^verify the Preferences page$")
	public void verify_the_Preferences_page() throws Throwable {
		Preferences preConnectorVerify=new Preferences(driver);
		preConnectorVerify.verifyPreferencesPage();
	}

	@When("^user should be to click Add Document$")
	public void user_should_be_to_click_Add_Document() throws Throwable {

		Add_Document ad=new Add_Document(driver);
		ad.clickAdd_DocumentLink();
		
	}

	@Then("^verify the Add Document page$")
	public void verify_the_Add_Document_page() throws Throwable {
		Add_Document adVerify=new Add_Document(driver);
		adVerify.verifyAdd_DocumentPage();
	}

	@When("^user should be to click Create Work$")
	public void user_should_be_to_click_Create_Work() throws Throwable {
		Create_Work cw= new Create_Work(driver);	
		cw.clickCreate_WorkLnkLink();
		
	}

	@Then("^verify the Create Work page$")
	public void verify_the_Create_Work_page() throws Throwable {
		Create_Work cwVerify= new Create_Work(driver);
		cwVerify.verifyCreate_WorkPage();
	}

	@When("^user should be to click Help$")
	public void user_should_be_to_click_Help() throws Throwable {
		String mainwindow = driver.getWindowHandle();
		Help hconnector=new Help(driver);
		hconnector.clickHelpLink();
		Thread.sleep(3000);
		ArrayList<String> newtabs = new ArrayList<String>(driver.getWindowHandles());
		driver.switchTo().window(newtabs.get(1)).close();	
		Thread.sleep(2000);
		driver.switchTo().window(mainwindow);

	}

	@When("^user should be to click Logout$")
	public void user_should_be_to_Logout() throws Throwable {
		System.out.println("logout");
		Logout logoutconnector= new Logout(driver);
		logoutconnector.clickLogoutLink();
	     
	}

	@Then("^verify the Logout page$")
	public void verify_the_Logout_page() throws Throwable {
		Logout logoutconnectorVerify= new Logout(driver);
		logoutconnectorVerify.verifyLogoutPage();
	}
	
}
